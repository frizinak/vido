#! /bin/bash
set -e


usage () {
    echo "Usage: $(basename "$0") [-c] <timeline-file>"
    echo "    -c: remove old proxy files"
    # echo "    -n: shows you how to normalize a file"
}

################################################################################

PROXY_DIR="./.vido-parts"
CLUT=
STAB=
FILTER_BEFORE=
FILTER_AFTER=
FFMPEG=(ffmpeg -hide_banner -nostdin -loglevel warning -hwaccel:v auto -filter_complex_threads 6 -filter_threads 6)
# PROXY_MUX_PARAMS=(-c:v hevc_nvenc -b_ref_mode 0 -preset:v lossless -tune lossless -c:a pcm_s16le)
PROXY_MUX_PARAMS=(-c:v dnxhd -profile:v dnxhr_hq -c:a pcm_s16le)
CONCURRENCY=${CONCURRENCY:-4}
SECTION=

################################################################################

clean=0
while getopts ':ch' o; do
    case "$o" in
        c)
            clean=1
            ;;
        # n)
        #     fn="$OPTARG"
        #     base="$(basename "$OPTARG" | rev | cut -d. -f2- | rev)"
        #     echo "${FFMPEG[*]} -i $fn -f lavfi -i anullsrc=cl=mono -f lavfi -i nullsrc=size=256x120 -c:a pcm_s16le -pix_fmt yuv420p -shortest -c:v hevc_nvenc -b_ref_mode 0 -cq 12 -preset:v slow  proxy-$base.mov";
        #     exit 0
        #     ;;
        h)
            usage;
            exit 0
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

shift "$((OPTIND -1))"

################################################################################

PROXY_DIR="./.vido-parts"
CLUT=
STAB=
FILTER_BEFORE=
FILTER_AFTER=
# PROXY_MUX_PARAMS=(-c:v hevc_nvenc -b_ref_mode 0 -preset:v lossless -tune lossless -c:a pcm_s16le)
PROXY_MUX_PARAMS=(-c:v dnxhd -profile:v dnxhr_hq -c:a pcm_s16le)
CONCURRENCY=${CONCURRENCY:-4}
SECTION=

################################################################################

input=${1:-Timeline}
rm "$PROXY_DIR/"*".tmp" 2>/dev/null || :
parts=()
nw_files=()
ex_files=("$PROXY_DIR/part-"*)

sections=()
section_ix=()

processes=0
lbl=0
pids=()
pids_info=()

last_section=-1

while read -r line; do
    line="$(echo "$line" | sed 's/#.*//')"
    if [ "$(echo "$line" | sed 's/ +//g')" = "" ];then
        continue
    fi

    if echo "$line" | grep -E '^\s*[_a-zA-Z0-9]+=' &>/dev/null; then
        printf '\033[48;5;238m\033[38;5;255m      %-60s [VAR] \033[0m\n' "$(echo "$line" | cut -d= -f1)" >&2
        eval "$line"
        continue
    fi

    lbl=$(( lbl + 1 ))
    mkdir "$PROXY_DIR" 2>/dev/null || :
    part="$(echo "$line" | grep -Eo '^.*[0-9_:\.]+-[0-9_:\.]+')"
    usrf="$( echo "${line:${#part}}" | sed  -E 's/(^\s*)|(\s*$)//g')"
    file="$(echo "$part" | rev | cut -d' ' -f2- | rev | sed  -E 's/(^\s*)|(\s*$)//g')"
    time="$(echo "$part" | rev | cut -d ' ' -f1 | rev | sed 's/_/0/g')"
    from="$(echo "$time" | cut -d- -f1)"
    till="$(echo "$time" | cut -d- -f2)"
    if [ "$(echo "$till" | sed 's/[0_:\.]\+//g')" = "" ]; then
        till=""
    fi

    prefix=(-ss "$from")
    if [ "$till" != "" ]; then
        prefix+=(-to "$till")
    fi
    prefix+=(-i "$file")

    if [ "$last_section" != "$SECTION" ]; then
        sections+=("$SECTION")
        section_ix+=($(( lbl - 1 )))
        last_section="$SECTION"
    fi

    outfile_prefix="$(printf '%s/part-' "$PROXY_DIR")"

    hash_stab="$(echo "${prefix[*]}" | sha1sum - | cut -d' ' -f1)"
    outfile_stab="$(printf '%s%s.stab' "$outfile_prefix" "$hash_stab")"

    filters=()
    if [ "$FILTER_BEFORE" != "" ]; then
        filters+=("[main]${FILTER_BEFORE}[main]")
    fi
    if [ "$usrf" != "" ]; then
        filters+=("[main]${usrf}[main]")
    fi
    if [ "$STAB" != "" ]; then
        filters+=("[main]vidstabtransform=$STAB:input=${outfile_stab}" "unsharp=5:5:0.8:3:3:0.4[main]")
    fi
    if [ "$CLUT" != "" ]; then
        filters+=("[main][1]haldclut=interp=trilinear[main]")
    fi
    if [ "$FILTER_AFTER" != "" ]; then
        filters+=("[main]${FILTER_AFTER}[main]")
    fi
    filters+=("[main]format=yuv420p[main]")

    if [ ${#filters[@]} != 0 ]; then
        filters[0]="$(echo "${filters[0]}" | sed 's/\[main\]/[0]/')"
    fi
    filter_str="$(IFS=,; echo "${filters[*]}")"

    suffix=("${PROXY_MUX_PARAMS[@]}" -map '[main]' -map '0:a')
    hash_main="$(echo "${prefix[*]} $CLUT $filter_str ${suffix[*]}" | sha1sum - | cut -d' ' -f1)"
    outfile_main="$(printf '%s%s.mov'  "$outfile_prefix" "$hash_main")"

    while [[ processes -ge CONCURRENCY ]]; do
        # exit code is irrelevant (see `help wait`)
        wait -n || :
        processes=$((processes-1))
    done

    processes=$((processes+1))
    {
        if [ "$STAB" != "" ] && [ ! -f "$outfile_stab" ]; then
            printf '\033[1m\033[48;5;227m\033[38;5;232m %03d) %-60s [STB] \033[0m\n' $lbl "$file" >&2
            tmp="$outfile_stab.tmp";
            "${FFMPEG[@]}" "${prefix[@]}" \
                -an \
                -vf "vidstabdetect=result=$tmp" \
                -f null \
                - <&- || exit 1
            mv "$tmp" "$outfile_stab"
        fi

        if [ "$CLUT" != "" ]; then
            prefix+=(-i "$CLUT")
        fi

        if [ ! -f "$outfile_main" ]; then
            printf '\033[1m\033[48;5;227m\033[38;5;232m %03d) %-60s [CNV] \033[0m\n' $lbl "$file" >&2
            tmp="$outfile_main.tmp"

            "${FFMPEG[@]}" "${prefix[@]}" \
                -stats \
                -filter_complex "$filter_str" \
                "${suffix[@]}" \
                -f mov \
                "$tmp" <&- || exit 1
            mv "$tmp" "$outfile_main"
        fi

        printf '\033[1m\033[48;5;155m\033[38;5;232m %03d) %-60s [RDY] \033[0m\n' $lbl "$file" >&2
    } &
    pids+=("$!")
    pids_info+=("$(printf '\033[1m\033[48;5;203m\033[38;5;232m %03d) %-60s [ERR] \033[0m' $lbl "$file")")

    parts+=("$outfile_main")
    nw_files+=("$outfile_main" "$outfile_stab")
done < "$input"

# we need separate waits to test every background jobs' exit code.
errix=-1
for ix in "${!pids[@]}"; do
    if ! wait "${pids[$ix]}"; then
        errix=$ix
    fi
done

if [ $errix -ge 0 ]; then
    echo -e "${pids_info[$errix]}" >&2
    exit 1
fi

if [ $clean -eq 1 ]; then
    for ex in "${ex_files[@]}"; do
        if [ ! -f "$ex" ]; then
            continue
        fi
        found=0
        for n in "${nw_files[@]}"; do
            if [ "$n" == "$ex" ]; then
                found=1
                break
            fi
        done

        if [ $found -eq 0 ]; then
            echo "removing '$ex'" >&2
            rm "$ex"
        fi
    done
fi

################################################################################

echo "#! /bin/bash"

for ix in "${!sections[@]}"; do
    section_name="${sections[$ix]:-main-$(( ix + 1 ))}"
    offset=${section_ix[$ix]}
    end=${section_ix[$ix+1]:-${#parts}}
    echo
    echo "# Section $section_name"

    cmd=(ffmpeg -loglevel error -stats -hwaccel:v auto -filter_complex_threads 6 -filter_threads 6)
    filter=""
    lbl=0
    for file in "${parts[@]:$offset:$end}"; do
        cmd+=(-i "$file")
        filter="${filter}[$lbl:v:0][$lbl:a:0]"
        lbl=$(( lbl + 1 ))
    done
    filter="${filter}concat=n=${lbl}:v=1:a=1[v][a]"
    cmd+=(-filter_complex "$filter" -map '[v]' -map '[a]' -c:v hevc_nvenc -b_ref_mode 0 -rc vbr -cq 16 -preset:v slow)

    for p in "${cmd[@]}"; do
        echo -n "$p "
        if [ ${#p} -ne 0 ] && [ ${p:0:1} != "-" ]; then
            echo "\\"
            echo -n "    "
        fi
    done
    echo "output-$section_name.mp4"
done
